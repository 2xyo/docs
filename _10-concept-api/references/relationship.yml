methods:
  - method:
    common: &method-rolePlayersMap
      title: Retrieve roleplayers per role
      description: Retrieves the roleplayers of a relationship mapped to each of its roles.
    java:
      <<: *method-rolePlayersMap
      method: relationship.rolePlayersMap();
      returns:
        - 'Map<[Role](/docs/concept-api/type?lang=java#role-methods), Set<[Thing](/docs/concept-api/thing#thing-methods?lang=java)>>'
    nodejs:
      <<: *method-rolePlayersMap
      method: async relationship.rolePlayersMap();
      returns:
        - 'Map<[Role](/docs/concept-api/type?lang=java#role-methods), Set<[Thing](/docs/concept-api/thing#thing-methods?lang=java)>>'
    cpython:
      <<: *method-rolePlayersMap
      method: relationship.role_players_map()
      returns:
        - Dict[[Role](/docs/concept-api/type?lang=java#role-methods), set[[Thing](/docs/concept-api/thing#thing-methods?lang=java)]]
  - method:
    common: &method-rolePlayers
      title: Retrieve roleplayers
      description: Retrieves the things that play a role in the relationship.
      accepts:
        param: &accepts-rolePlayers-role
          name: role
          description: The role to filter the roleplayers by.
          required: false
          default: N/A
    java:
      <<: *method-rolePlayers
      method: relationship.rolePlayers(Role role);
      accepts:
        <<: *accepts-rolePlayers-role
        type: "[Role](/docs/concept-api/type?lang=java#role-methods)"
      returns:
        - "Stream of [Thing](/docs/concept-api/thing?lang=java) objects"
    nodejs:
      <<: *method-rolePlayers
      method: async relationship.rolePlayers(role);
      accepts:
        <<: *accepts-rolePlayers-role
        type: "[Role](/docs/concept-api/type?lang=javascript#role-methods)"
      returns:
        - "[Iterator](/docs/client-api/nodejs#client-api-title-iterator) of [Thing](/docs/concept-api/thing?lang=java) objects"
    cpython:
      <<: *method-rolePlayers
      method: relationship.role_players(role)
      accepts:
        <<: *accepts-rolePlayers-role
        type: "[Role](/docs/concept-api/type?lang=python#role-methods)"
      returns:
        - "[Iterator](/docs/client-api/python#client-api-title-iterator) of [Thing](/docs/concept-api/thing?lang=java) objects"
  - method:
    common: &method-assign
      title: Add a new roleplayer
      description: Adds a new roleplayer to play the given role in the relationship.
      accepts: &accepts-assign
        param: &accepts-assign-role
          name: role
          description: The role to be played by the `thing`

          required: true
          default: N/A
        param: &accepts-assign-thing
          name: thing
          description: The thing to play the `role`
          required: true
          default: N/A
    java:
      <<: *method-assign
      method: relationship.assign(Role role, Thing thing);
      accepts:
        param:
          <<: *accepts-assign-role
          type: "[Role](/docs/concept-api/type?lang=java#role-methods)"
        param:
          <<: *accepts-assign-thing
          type: "[Thing](/docs/concept-api/thing?lang=java)"
      returns:
        - '[Relationship](/docs/concept-api/thing#relationship-methods) object'
    nodejs:
      <<: *method-assign
      method: async relationship.assign(role, thing);
      accepts:
        param:
          <<: *accepts-assign-role
          type: "[Role](/docs/concept-api/type?lang=javascript#role-methods)"
        param:
          <<: *accepts-assign-thing
          type: "[Thing](/docs/concept-api/thing?lang=javascript)"
      returns:
        - void
    cpython:
      <<: *method-assign
      method: relationship.assign(role, thing)
      accepts:
        param:
          <<: *accepts-assign-role
          type: "[Role](/docs/concept-api/type?lang=python#role-methods)"
        param:
          <<: *accepts-assign-thing
          type: "[Thing](/docs/concept-api/thing?lang=python)"
      returns:
        - '[Relationship](/docs/concept-api/thing#relationship-methods) object'
  - method:
    common: &method-unassign
      title: Removes a roleplayer
      description: Removes a roleplayer from playing the given role in the relationship.
      accepts:
        param: &accepts-unassign-role
          name: role
          description: The role to not be played by the `thing`
          required: true
          default: N/A
        param: &accepts-unassign-thing
          name: thing
          description: The thing to not play the `role`
          type: "[Thing](/docs/concept-api/thing)"
          required: true
          default: N/A
    java:
      <<: *method-unassign
      method: relationship.unassign(Role role, Thing thing);
      accepts:
        param:
          <<: *accepts-unassign-role
          type: "[Role](/docs/concept-api/type?lang=java#role-methods)"
        param:
          <<: *accepts-unassign-thing
          type: "[Thing](/docs/concept-api/thing?lang=java)"
      returns:
        - '[Relationship](/docs/concept-api/thing#relationship-methods) object'
    nodejs:
      <<: *method-unassign
      method: async relationship.unassign(role, thing);
      accepts:
        param:
          <<: *accepts-unassign-role
          type: "[Role](/docs/concept-api/type?lang=javascript#role-methods)"
        param:
          <<: *accepts-unassign-thing
          type: "[Thing](/docs/concept-api/thing?lang=javascript)"
      returns:
        - void
    cpython:
      <<: *method-unassign
      method: relationship.unassign(role, thing)
      accepts:
        param:
          <<: *accepts-unassign-role
          type: "[Role](/docs/concept-api/type?lang=python#role-methods)"
        param:
          <<: *accepts-unassign-thing
          type: "[Thing](/docs/concept-api/thing?lang=python)"
      returns:
        - '[Relationship](/docs/concept-api/thing#relationship-methods) object'
