props:
  - prop:
    common: &prop-id
      title: Retrieve the identifier
      description: Retrieves the identifier of the concept generated by Grakn.
      returns:
        - String
    nodejs:
      <<: *prop-id
      prop: 'concept["id"];'
    cpython:
      <<: *prop-id
      prop: concept.id
methods:
  - method:
    common: &method-id
      title: Retrieve the identifier
      description: Retrieves the identifier of the concept generated by Grakn.
      method: concept.id();
      returns:
        - ConceptId
    java:
      <<: *method-id
  - method:
    common: &method-isType
      title: Check if concept is a Type
      returns:
        - boolean
    java:
      <<: *method-isType
      method: concept.isType();
    nodejs:
      <<: *method-isType
      method: concept.isType();
    cpython:
      <<: *method-isType
      method: concept.is_type()
  - method:
    common: &method-isThing
      title: Check if concept is a Thing
      returns:
        - boolean
    java:
      <<: *method-isThing
      method: concept.isThing();
    nodejs:
      <<: *method-isThing
      method: concept.isThing();
    cpython:
      <<: *method-isThing
      method: concept.is_thing()
  - method:
    common: &method-isEntityType
      title: Check if concept is an EntityType
      returns:
        - boolean
    java:
      <<: *method-isEntityType
      method: concept.isEntityType();
    nodejs:
      <<: *method-isEntityType
      method: concept.isEntityType();
    cpython:
      <<: *method-isEntityType
      method: concept.is_entity_type()
  - method:
    common: &method-isAttributeType
      title: Check if concept is an AttributeType
      returns:
        - boolean
    java:
      <<: *method-isAttributeType
      method: concept.isAttributeType();
    nodejs:
      <<: *method-isAttributeType
      method: concept.isAttributeType();
    cpython:
      <<: *method-isAttributeType
      method: concept.is_attribute_type()
  - method:
    common: &method-isRelationshipType
      title: Check if concept is a RelationshipType
      returns:
        - boolean
    java:
      <<: *method-isRelationshipType
      method: concept.isRelationshipType();
    nodejs:
      <<: *method-isRelationshipType
      method: concept.isRelationshipType();
    cpython:
      <<: *method-isRelationshipType
      method: concept.is_relationship_type()
  - method:
    common: &method-isEntity
      title: Check if concept is an Entity
      returns:
        - boolean
    java:
      <<: *method-isEntity
      method: concept.isEntity();
    nodejs:
      <<: *method-isEntity
      method: concept.isEntity();
    cpython:
      <<: *method-isEntity
      method: concept.is_entity()
  - method:
    common: &method-isAttribute
      title: Check if concept is an Attribute
      returns:
        - boolean
    java:
      <<: *method-isAttribute
      method: concept.isAttribute();
    nodejs:
      <<: *method-isAttribute
      method: concept.isAttribute();
    cpython:
      <<: *method-isAttribute
      method: concept.is_attribute()
  - method:
    common: &method-isRelationship
      title: Check if concept is a Relationship
      returns:
        - boolean
    java:
      <<: *method-isRelationship
      method: concept.isRelationship();
    nodejs:
      <<: *method-isRelationship
      method: concept.isRelationship();
    cpython:
      <<: *method-isRelationship
      method: concept.is_relationship()
  - method:
    common: &method-asType
      title: Cast the concept as Type
      description: Casts the concept as Type so that we can call the Type methods on it.
      method: concept.asType();
      returns:
        - "[Type](/docs/concept-api/type) object"
    java:
      <<: *method-asType
  - method:
    common: &method-asThing
      title: Cast the concept as Thing
      description: Casts the concept as Thing so that we can call the Thing methods on it.
      method: concept.asThing();
      returns:
        - "[Thing](...) object"
    java:
      <<: *method-asThing
  - method:
    common: &method-asEntityType
      title: Cast the concept as EntityType
      description: Casts the concept as EntityType so that we can call the EntityType methods on it.
      method: concept.asEntityType();
      returns:
        - "[EntityType](...) object"
    java:
      <<: *method-asEntityType
  - method:
    common: &method-asAttributeType
      title: Cast the concept as AttributeType
      description: Casts the concept as AttributeType so that we can call the AttributeType methods on it.
      method: concept.asAttributeType();
      returns:
        - "[AttributeType](...) object"
    java:
      <<: *method-asAttributeType
  - method:
    common: &method-asRelationshipType
      title: Cast the concept as RelationshipType
      description: Casts the concept as RelationshipType so that we can call the RelationshipType methods on it.
      method: concept.asRelationshipType();
      returns:
        - "[RelationshipType](...) object"
    java:
      <<: *method-asRelationshipType
  - method:
    common: &method-asAttributeType
      title: Cast the concept as AttributeType
      description: Casts the concept as AttributeType so that we can call the AttributeType methods on it.
      method: concept.asAttributeType();
      returns:
        - "[AttributeType](...) object"
    java:
      <<: *method-asAttributeType
  - method:
    common: &method-asEntity
      title: Cast the concept as Entity
      description: Casts the concept as Entity so that we can call the Entity methods on it.
      method: concept.asEntity();
      returns:
        - "[Entity](...) object"
    java:
      <<: *method-asEntity
  - method:
    common: &method-asAttribute
      title: Cast the concept as Attribute
      description: Casts the concept as Attribute so that we can call the Attribute methods on it.
      method: concept.asAttribute();
      returns:
        - "[Attribute](...) object"
    java:
      <<: *method-asAttribute
  - method:
    common: &method-asRelationship
      title: Cast the concept as Relationship
      description: Casts the concept as Relationship so that we can call the Relationship methods on it.
      method: concept.asRelationship();
      returns:
        - "[Relationship](...) object"
    java:
      <<: *method-asRelationship
